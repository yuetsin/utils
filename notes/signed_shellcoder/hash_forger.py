#!/usr/bin/env python3

import os
import hashlib
import binascii

from crack import *

sig_len = len(binascii.hexlify(hashlib.sha256(b'').digest()))

eval_payload = '/bin//bash'

# generated by crack.py

# !! fix this !!
append = generate_append_payload()
data = generate_data_payload(eval_payload.encode())
print('data body len:', len(binascii.unhexlify(data)))


def generate_forged(valid_shellcode: str) -> list:
    print(valid_shellcode)
    signature = valid_shellcode[-sig_len:]
    # data = valid_shellcode[:-sig_len]

    forged_codes = []
    for last_byte_xor in range(16):
        real_sig = signature[:-1] + \
            hex(int(signature[-1], base=16) ^ last_byte_xor)[2:]
        for secret_len in range(32, 64):
            # print('to execute: ', "./hash_extender --data %s --secret %d --append %s --signature %s --format sha256" %
            #   (data, secret_len, append, real_sig))
            forged_hash = os.popen(
                "./hash_extender --data %s --data-format=hex --secret %d --append %s --append-format=hex --signature %s --format sha256" % (data, secret_len, append, real_sig)).readlines()

            new_signature = forged_hash[2][15:-1]
            # print(repr(forged_hash[2]))
            assert(len(signature) == sig_len)
            new_content = forged_hash[3][12:-1]
            # print(repr(forged_hash[3]))
            fixed_new_signature = new_signature[:-1] + \
                hex(int(new_signature[-1], base=16) ^ last_byte_xor)[2:]
            forged_codes.append(new_content + fixed_new_signature)

            # print('try this one! No.%d of 512 total, secret_len=%d, last_byte_xor=%d' %
            #       (secret_len - 31 + last_byte_xor * 32, secret_len, last_byte_xor))
            # print(new_content + new_signature_fixed)
            # input()
    return forged_codes
