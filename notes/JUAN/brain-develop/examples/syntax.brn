/*
one of two comment styles
*/

// complete type inference isn't currently supported, so this doesn't work:
//let foo = b"bar";
// statically allocated array of bytes initialized to the given string
// length is automatically determined by the compiler
let s: [u8; _] = b"foo bar";
// We can get the length of a string using the len() property
// The type that len() returns is `usize` and for the time-being that is u8
// This mean
// writeln outputs a b"\n" at the end
stdout.println(s.len());
// The write statement supports a variable number of both identifier and string literal arguments
stdout.print(s, b"\n");

// if the length cannot be determined automatically, it must be specified
let a: [u8; 4];
// length must be greater than zero
let b: [u8; 1];
// read needs to be a statement so the type information can be used to determine the length
stdin.read_exact(a, b);

// both sides have to have the same length
if b == b"a" {
    stdout.println(b"equal");
}
else if a == b"fooo" {
    stdout.println(b"foo");
}
else {
    stdout.println(b"not equal");
}

// A single byte-sized numeric type is supported
// value must be in the range for the type
let mut counter: u8 = 200;
// the while condition must evaluate to a boolean
while counter > 0 {
    // This is a placeholder function that mutates counter and subtracts one
    // This exists because we don't want to implement a complete set of numeric operations right now
    decrement(counter);
    stdout.println(counter);
}

//NOT SUPPORTED FOR NOW:
// the type of i is usize
// i goes from 1 <= i < 10
// This currently must be a static, finite counter
// variables are not supported as counter limits
// This is basically implemented as a brainfuck loop that goes from
// 0 to (end-start) and start is added to the cell *within* the loop
//for i in 1..10 {
//    stdout.println(b"i = ", counter);
//}
